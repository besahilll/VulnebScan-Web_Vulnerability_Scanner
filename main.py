import requests
from urllib.parse import urlparse
from security_check import get_security_headers, check_security
from port_scan import scan_ports, scan_port
from Sqli import sql_injection_scan
from XSS import xss_scan

def main():
  print("1. Port Scanning")
  print("2. Vulnerability Scanning")
  print("3. Both Port and Vulnerability Scanning")
  print("4. SQL Injection Scanning")
  print("5. XSS Vulnerability Scanning")
  print("6. Comprehensive Vulnerability Assessment")  # Added option 6
  choice = input("Enter your choice: ")

  if choice == "1" or choice == "3":
    url = input("Enter URL to scan: ")
    target_host = urlparse(url).netloc

    print("1. Scan all open ports")
    print("2. Scan a specific port")
    port_choice = input("Enter your choice: ")

    if port_choice == "1":
      port_range = range(1, 4000)
      vulnerable_ports = []
      scan_ports(target_host, port_range, vulnerable_ports)
      print("Vulnerable ports:")
      for port, vulnerability in vulnerable_ports:
        print(f"Port {port} - {vulnerability}")
    elif port_choice == "2":
      port_to_scan = int(input("Enterthe port to scan: "))
      vulnerable_ports = []
      scan_port(target_host, port_to_scan, vulnerable_ports)

  if choice == "2" or choice == "3":
    url = input("Enter URL to scan for vulnerabilities: ")
    security_headers = get_security_headers(url)
    check_security(security_headers)

  if choice == "4":
    url = input("Enter URL to scan for SQL injection vulnerabilities: ")
    sql_injection_scan(url)

  if choice == "5":
    url = input("Enter URL to scan for XSS vulnerabilities: ")
    xss_scan(url)

  if choice == "6":  # Added comprehensive vulnerability assessment
    url = input("Enter URL to scan: ")

    # Perform vulnerability checks
    security_headers = get_security_headers(url)
    missing_headers = check_security(security_headers)  # Might return None

    sql_vulnerable = sql_injection_scan(url)
    xss_vulnerable = xss_scan(url)

    # Analyze risk level based on findings
    risk_level = "low"
    if sql_vulnerable or xss_vulnerable:
      risk_level = "high" 
    elif missing_headers is not None and len(missing_headers) >= 4:  # Check for None before len()
      risk_level = "medium"
    elif missing_headers is not None and 2 <= len(missing_headers) < 4:  # Check for None before len()
      risk_level = "low"

    print(f"Risk Level: {risk_level}")
    if missing_headers:  # Check for None before accessing elements
      print(f"Missing Security Headers: {', '.join(missing_headers)}")


if __name__ == "__main__":
  main()
